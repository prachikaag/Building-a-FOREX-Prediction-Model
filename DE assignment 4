from oandapyV20 import API
import oandapyV20.endpoints.pricing as pricing
from oandapyV20.contrib.requests import MarketOrderRequest
from collections import deque
from datetime import datetime as dt, timedelta, time, date
from typing import Dict, List, Tuple
import oandapyV20.endpoints.orders as orders
import json
import pandas as pd
import os

# oanda api config
API_TOKEN = "1bf24f76b4f90b9ea25640336ba2c4e1-296fb7e5d513fa85f48818698f8779c7"
ACCOUNT_ID = "101-001-25520574-002"

# execution config
EXECUTION_TIMES = deque([(15, 17), (19, 22), (23, 1), (3, 6)])
INSTRUMENTS: List[Tuple] = [("EUR_USD", "B"), ("GBP_CHF", "S")]


def extract_prices_of_instruments(response: Dict) -> Dict:
    tmp = dict.fromkeys(INSTRUMENTS)
    for price in response["prices"]:
        instrument = price["instrument"]
        tmp[instrument] = {
            "ask": float(price["closeoutAsk"]),
            "bid": float(price["closeoutBid"]),
        }
    return tmp


def flatten_transaction_response(response: Dict) -> pd.DataFrame:
    df = pd.json_normalize(response)
    df = df[
        [
            "orderFillTransaction.id",
            "orderFillTransaction.accountID",
            "orderFillTransaction.userID",
            "orderFillTransaction.batchID",
            "orderFillTransaction.requestID",
            "orderFillTransaction.time",
            "orderFillTransaction.type",
            "orderFillTransaction.orderID",
            "orderFillTransaction.instrument",
            "orderFillTransaction.units",
            "orderFillTransaction.requestedUnits",
            "orderFillTransaction.price",
            "orderFillTransaction.pl",
            "orderFillTransaction.quotePL",
            "orderFillTransaction.financing",
            "orderFillTransaction.baseFinancing",
            "orderFillTransaction.commission",
            "orderFillTransaction.accountBalance",
            "orderFillTransaction.gainQuoteHomeConversionFactor",
            "orderFillTransaction.lossQuoteHomeConversionFactor",
            "orderFillTransaction.guaranteedExecutionFee",
            "orderFillTransaction.quoteGuaranteedExecutionFee",
            "orderFillTransaction.halfSpreadCost",
            "orderFillTransaction.fullVWAP",
            "orderFillTransaction.reason",
        ]
    ]

    df.rename(columns=lambda x: x.replace("orderFillTransaction.", ""), inplace=True)
    return df


def main() -> None:
    api = API(access_token=API_TOKEN)
    while EXECUTION_TIMES:
        time_range = EXECUTION_TIMES.popleft()
        start_time = time_range[0]
        end_time = time_range[1]

        alert_once_flag = True
        while dt.now().hour != start_time:
            if alert_once_flag:
                print("[DEBUG] Will wait for the right hour to start the execution")
                alert_once_flag = False

        print("[DEBUG] Starting!")

        batch_start_time = dt.now()
        df: pd.DataFrame = None
        while dt.now().hour <= end_time:
            # Fetch the real time price of the currency pairs from the oanda api
            q = pricing.PricingInfo(
                accountID=ACCOUNT_ID,
                params={
                    "instruments": ",".join(list(map(lambda x: x[0], INSTRUMENTS)))
                },
            )
            res = api.request(q)
            prices = extract_prices_of_instruments(res)

            for instrument in INSTRUMENTS:
                order_type = "ask" if instrument[1] == "B" else "bid"
                units = (10_000 // prices[instrument[0]][order_type]) * (
                    1 if instrument[1] == "B" else -1
                )
                print(f"[INFO] will execute {instrument[0]} for {units} units")
                mo = MarketOrderRequest(instrument=instrument[0], units=units)
                q = orders.OrderCreate(accountID=ACCOUNT_ID, data=mo.data)
                res = api.request(q)

                record = flatten_transaction_response(res)
                if df is not None:
                    df = pd.concat([df, record])
                else:
                    df = record.copy()

            while (dt.now() - batch_start_time).seconds < 360:
                pass

            print("[INFO] 6 min timer elasped")
            df.to_csv(
                "output.csv",
                mode="a",
                header=not os.path.exists("output.csv"),
                index=False,
            )
            df = pd.DataFrame(columns=df.columns)
            batch_start_time = dt.now()

        print("[INFO] Time slot elasped")
        print("[INFO] Writing the result to output.csv")

    print("[DEBUG] Completed!")
    print("[INFO] See the output.csv for execution logs")


if __name__ == "__main__":
    main()